import asyncio
from typing import List

from aiogram import Bot, Dispatcher, F
from config import settings
from core.filters.filter_for_back import IsNoneFilter
from core.handlers.back_handler import router as back_router
from core.handlers.start import router as start_router, finish
from core.handlers.admin_handler import router as admin_router
from core.handlers.feedback_handler import router as feedback_router
import logging
from logging.handlers import RotatingFileHandler
from redis import asyncio as aioredis
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove
from core.data_base.queries_core import AsyncCore
from core.utils.FSM import FSM
from core.utils.rating import rating
from core.filters.dp_filter import DpFilter  ###########
from core.handlers.start import finish
from core.handlers.feedback_handler import handler_text, handler_photo
import datetime


# def on_startup(bot: Bot, user_id):
#     user = bot.get_chat_member(chat_id=user_id, user_id=user_id)
#     print(user)


async def main():
    bot = Bot(token=settings.TOKEN_KOSTYA.get_secret_value(), parse_mode="HTML")
    # await create_database()

    redis_connection = aioredis.client.Redis(decode_responses=True)
    # redis_connection.ttl()

    # await redis_connection.set(name="kek", value=23, ex=10)
    # redis_connection = redis.StrictRedis(
    #     host="109.172.82.65", port="6379", username="default", password="Lx)J&WH6$.xyD8"
    # )

    storage = RedisStorage(redis=redis_connection)
    dp = Dispatcher(storage=storage)
    dp["redis"] = redis_connection

    # dp.shutdown.register(on_shutdown)
    dp.message.register(
        rating, DpFilter(dp), F.text == "–†–µ–π—Ç–∏–Ω–≥ üíé", IsNoneFilter()
    )  # Add a filter to ensure that the user not in any other FSMstate
    dp.message.register(
        finish,
        DpFilter(dp),
        F.text.in_(
            [
                "5 | XS | 1$",
                "10 | S | 2$",
                "20 | M | 4$",
                "30 | L | 6$",
                "50 | XL | 10$",
                "100 | XXL | 20$",
            ]
        ),
        FSM.sizes,
    )
    dp.message.register(
        handler_text, DpFilter(dp), F.text, ~(F.text == "‚óÄÔ∏è–ù–∞–∑–∞–¥"), FSM.feedback
    )
    dp.message.register(handler_photo, DpFilter(dp), F.photo, FSM.feedback)

    dp.include_routers(admin_router, start_router, back_router, feedback_router)
    # dp.message.
    try:
        await bot.delete_webhook(drop_pending_updates=False)
        await dp.start_polling(bot)
    finally:
        await bot.session.close()
        await dp["redis"].aclose()


if __name__ == "__main__":
    log_formatter = logging.Formatter("%(asctime)s;%(levelname)s;%(message)s")
    # log_handler = RotatingFileHandler(
    #     "py_log.log", maxBytes=5 * 1024 * 1024, backupCount=1
    # )
    # log_handler = RotatingFileHandler(
    #     "py_log.log", maxBytes=5 * 1024 * 1024, backupCount=1
    # )
    # log_handler.setFormatter(log_formatter)
    # logging.basicConfig(level=logging.INFO, handlers=[log_handler])
    logging.basicConfig(level=logging.INFO)

    asyncio.run(main())

# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ë–î sqlite
# —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∏–ø-–∞—Ä—Ö–∏–≤–∞
# –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Loguru) - –Ω–µ—Ç, logging!
# –∞–Ω—Ç–∏—Ñ–ª—É–¥ (–º–∏–¥–¥–ª–≤–∞—Ä–∏) - –ø–æ—Ö–æ–¥—É –ø—Ä–∏–¥–µ—Ç—Å—è –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–∫—Ä—É—á–∏–≤–∞—Ç—å redis, –∞ —É–∂ –ø–æ—Ç–æ–º —Å—Ç–∞–≤–∏—Ç—å –∞–Ω—Ç–∏—Ñ–ª—É–¥
# —Ü–µ–ª—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç - –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é –∏ —Å–∏—Å—Ç–µ–º–µ –æ–ø–ª–∞—Ç—ã
# —Ç–∞–∫–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ü–µ–ø–æ—á–∫—É –≤–æ–ø—Ä—Å–æ–æ–≤, –±–µ–∑ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏, –ø–æ–∫–∞ –ö–æ—Å—Ç—è –Ω–µ —Å–¥–µ–ª–∞–ª –ø–∞–ø–æ—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
# –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ—è —Ü–µ–ª—å - —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–µ–±—Ö—É–∫, –ø–æ—Å–ª–µ –Ω–µ–≥–æ –æ–ø–ª–∞—Ç–∞ –∏ –≤—Å–µ - –º–æ—è —á–∞—Å—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≥–æ—Ç–æ–≤–∞


# –í–µ–±—Ö—É–∫ –≥–æ—Ç–æ–≤. –û–ø–ª–∞—Ç–∞
# –°—É–¥—è –ø–æ –≤—Å–µ–º—É, –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ —Ä–æ–±–æ–∫–∞—Å—Å—É
# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Redis –ø–æ–∫–∞ –¥–µ–ª–∞—Ç—å –Ω–µ –±—É–¥—É, –æ–≥—Ä–æ–º–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –Ω–∞—Ä–æ–¥—É –≤ –æ–¥–∏–Ω –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ
# –°–¥–µ–ª–∞–ª –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞. –ù—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–æ–∫—É–ø–∫–∏

# –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç main_menu —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø–æ–ª—è–Ω—Ç—å –º–µ—Å—Ç–æ –≤ Redis. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–∞–∂–º–µ—Ç "–ó–∞–ø—É—Å—Ç–∏—Ç—å", –∏ –≤—Å–µ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ
