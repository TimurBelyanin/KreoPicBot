from aiogram import Bot, Dispatcher
from core.data_base.queries_core import AsyncCore
from aiogram.types import Message


positions = {
    0: "0Ô∏è‚É£",
    1: "1Ô∏è‚É£",
    2: "2Ô∏è‚É£",
    3: "3Ô∏è‚É£",
    4: "4Ô∏è‚É£",
    5: "5Ô∏è‚É£",
    6: "6Ô∏è‚É£",
    7: "7Ô∏è‚É£",
    8: "8Ô∏è‚É£",
    9: "9Ô∏è‚É£",
    10: "üîü",
}


async def username_func(user_id: int, bot: Bot):
    """Return username from user_id"""
    string = await bot.get_chat_member(chat_id=user_id, user_id=user_id)
    return string.user.username


async def calculate_rating(bot: Bot):
    """Calculates the freshest rating"""

    users = await AsyncCore.select_workers()
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Å –Ω–∏–∫–æ–º –∏ –∫–æ–ª-–≤–æ–º kreo
    users = [(await username_func(i[0], bot), i[2]) for i in users]
    # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    string = "\n".join(
        [f"{positions[i + 1]} @{k[0]} | {k[1]} kreo" for i, k in enumerate(users)]
    )
    return f"–†–µ–π—Ç–∏–Ω–≥ KreoPicBotüíé\n\n{string}"


async def calculate_personal_position(user_id: int, bot: Bot):
    """Function which calculates dynamic personal position"""

    user = await AsyncCore.get_personal_position(user_id)
    kreo, position = user[0][1:]
    # Here we build personal dynamic string
    username = await username_func(user_id, bot)
    string = f"{''.join([positions[int(i)] for i in str(position)])} @{username} | {kreo} kreo"
    return string


async def calculate_personal_position_and_push(user_id: int, bot: Bot, dp: Dispatcher):
    """Function which put personal string into cache if it's not there and return it from there"""

    if not await dp.get("redis").get(str(user_id) + "position"):
        await dp.get("redis").set(
            name=str(user_id) + "position",
            value=await calculate_personal_position(user_id, bot),
            ex=600,
        )
    return await dp.get("redis").get(str(user_id) + "position")


async def rating(message: Message, bot: Bot, dp: Dispatcher):
    """Function which returns rating"""
    # if value not in the cache, we add the value
    if not await dp.get("redis").get("string"):
        await dp.get("redis").set(name="string", value=await calculate_rating(bot))
    string = await dp.get("redis").get("string")  # from cache
    await message.answer(
        f"<b>{string}\n...\n{await calculate_personal_position_and_push(message.from_user.id, bot, dp)}</b>"
    )


# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ. –°–∞–º —Å–ø–∏—Å–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤—Å–µ–≥–¥–∞ –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫—ç—à–∞. –ü–µ—Ä–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ
# –° –ª–∏—á–Ω—ã–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –≤—Å–µ —Ç–∞–∫ –∂–µ, —Ç–æ–ª—å–∫–æ –æ–Ω–æ –º–µ–Ω—è–µ—Ç—Å—è –Ω–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ Redis –Ω–∞ 10 –º–∏–Ω—É—Ç.
